2014-10-20
	增加数据适配器,使支持多数据库类型
2015-01-08
	增加没有主键ID的抽象类,使能自义主键字段实现MODEL
	增加虚拟字段转换,将指定函数或语法转换为对象属性,灵活性更大了
	增加属性覆盖,继承的类能覆盖父类的属性了
2015-01-19
	自动编译判断增加查询字段判断,不会因为对象属性删除了,编译的存储过程里还有老字段
2015-01-27
	增加GUID类型映射
	查询数据源不再是DataTable,改为DataReader,增加DataReader回调,原因是DataReader在关闭前,output是取不到值的
	同时修改CoreHelper使支持延迟取output
2015-01-30
	增加类型与适配器匹配,使支持一个应用内多种数据库类型
2015-02-02
	整理对象和属性缓存为关联项
	重写字段类型转换方法
2015-02-04
	增加数据访问上下文方法,解决事务专参问题
	需要实现方法
	public static AgentManage ContextInstance<T>(CRL.BaseProvider<T> baseProvider) where T : CRL.IModel, new()
    {
        var instance = Instance;
        instance.SetContext(baseProvider);
        return instance;
    }
2015-02-06
	封装表达式查询方法参数,使支持扩展
2015-02-09
	表达式查询方法引入到适配器
	修改DateDiff方法,新写法为
	query.Where(b=>b.AddTime.DateDiff(CRL.DatePart.dd,DateTime.Now)>1);
2015-02-25
	增加了修改属性值的扩展方法,以代替ParameCollection
	p.Change(b => b.BarCode);//表示值被更改了
    p.Change(b => b.BarCode,"123");//通过参数赋值
    p.Change(b => b.BarCode == "123");//通过表达式赋值
	数据缓存更新现在是多线程了
2015-02-27
	通过重新构造属性能实现差异更新了
	string name;
    public string Name
    {
        get { return name; }
        set {
            name = value;
            SetChanges("name", value);
        }
    }
2015-02-28 
	新增的属性也能自动在数据库创建了,根目录会生成数据表缓存文件TableCache.config以作对比
2015-03-02
	在更新数据时,如果缓存里也有该数据,缓存也会被更改
	权限控制缓存只会产生一种了
2015-03-04
	解决查询表达式多个扩展方法同时写,解析时会报错的BUG
2015-03-10
	重大更新:重新整理了表达式解析,增加了关联查询支持,以两种形式返回关联结果
	1.按筛选值返回动态对象
	2.附加给属性索引,以索引的方式调用
2015-03-15
	关联能返回别名了
2015-03-16
	对象缓存查找效率更高了
2015-03-26
	简化GROUP分页,现在能直接用语法进行GROUP了
2015-04-03
	增加了Distinct支持
2015-04-07
	修改了字段没有正确检查的错误
2015-04-13
	优化了字段查找和适配器创建
2015-04-24
	重大更新,增加了分布式缓存查询,能用编程语法查询服务器缓存了
	TCP形式支持连接池的机制,简单实现了并发连接
	http://www.cnblogs.com/hubro/p/4467700.html
2015-05-05
	使缓存服务支持分布式
2015-05-08
	增加Min,Max方法
2015-05-13
	修改TCP缓存代理并发连接BUG
2015-05-18
	缓存改为主键字典,按主键查询更快了,对象缓存条件创建发生了更改
	AllCache改为返回IEnumerable了
2015-05-28
	表达式右边支持对象属性运算了 如 b=>b.Number1<b.Number2
2015-07-02
	支付接口增加了一堆接口...
2015-07-13
	增加了简单数的据重复插入判断
2015-07-23
	修改关联查询别名的BUG
	修改关联查询属性方法没有实现
	修改插入记录时,缓存没更新
2015-08-09
	SUM,COUNT支持字段计算了如 Sum(b=>b.Num*b.Price)
	字段选择也支持计算了 b=>b.Sum(x=>x.Num*x.Price)
2015-08-20
	导入导出XML去掉了,更改为Json
2015-08-30
	Join,筛洗字段不为必填了,为空则按主表字段
	修改了MemberExpression属性类型判断问题 
	增加Page方法,以SQL语句形式分页,此方式需要查询两次数据库
2015-09-03
	增加Cumulation扩展方法,表示值被累加 等效SQL为 num=num+1
	增加了分布式查询接口直接查询源数据的方法DeaDataQueryCommand
	优化了自动编译,访问对象改为新实例
2015-09-12
	为实现分库分表,重新整理数据访问对象传递为DbContext
	实现了分表表名转换
	升级了访问对象创建,回调委托类型支持分库定位
	http://www.cnblogs.com/hubro/p/4821399.html
2015-09-21
	版本升级为2.4
2015-09-22
	优化字段选择和扩展方法查询
2015-09-26
	升级改到3.0版,2.X版不再更新
	http://www.cnblogs.com/hubro/p/4911978.html
2015-09-28
	Model索引值类型改为dynamic
	减少QueryList方法参数
2015-10-08
	重载了BaseProvider
	增加了in select查询
2015-10-10
	增加Equals扩展方法解析
2015-10-15
	 优化了PackageTrans方法,去掉暴露在外面的事务控制方法
	 去掉了SetContext方法,使用TransactionScope实现整体事务
	 账户系统去掉SQL写法,改为对象
2015-10-20
	修改了创建表时数据初始,改为在Model实现GetInitData
	修改了缓存null判断
	数据访问对象dbHelper改名为DBExtend
2015-10-23
	更改字段别名返回和处理,不需专门传映射关系
	QueryFromAllCache方法名 改为QueryFromCache
	增加CRL演示项目
2015-10-28
	修改查询语法解析BOOL值没转换的问题
	修改多列排序没有逗号隔开
2015-11-02
	 增加INT类型Between查询
	 修改扩展方法支持一元运算符,如 query.Where(b => !b.Id.In(1, 2, 3));
	 优化左右表达式解析,语法解析没有左右之分了
	 增加关联对象排序方法,能按关联对象字段排序了
2015-11-04
	 合并了ExpressionVisitor,语法解析统一用一个了
	 修改虚拟字段别名没有正确生成
2015-11-9
	优化了生成字段查询语法,默认查询和JOIN查询合并为一个方法
2015-11-11
	增加了执行时间记录
	更改判断表创建缓存为JSON格式
	增加了执行时间记录
2015-11-15
	增加了表结构后台进程二次检查,没同步的字段,也能自动同步了
2015-11-18
	 修改扩展方法Like,增加LikeLeft,LikeRight
	 增加了动态类型分页查询,所有查询都能分页了
	 分页增加指定类型转换
	 优化了查询方法,LambdaQuery能直接返回所有查询结果了
2015-11-20
	版本升级为3.1
	http://www.cnblogs.com/hubro/p/4981728.html
	去掉了业务类里LambdaQuery为参数的查询方法,改为直接由LambdaQuery进行查询返回
	返回结果为以下类型
	List<dynamic> ToDynamic()
	List<TResult> ToList<TResult>()
	List<T> ToList()
	Dictionary<TKey, TValue> ToDictionary<TKey, TValue>()
	筛选值时,能按关联表选择了,GROUP也一样
2015-11-21
	优化分页判断
	修改匿名对象查询,使能正确返回值
	关联查询改为查询分支了,Join方法会创建一个LambdaQueryJoin对象进行链式调用
2015-11-25
	增加Nullable可空类型属性支持
	public DateTime? Birthday
    {
        get;
        set;
    }
2015-11-25
	优化表达式动态编译,使常量不再编译成委托
2015-12-04
	优化了关联,使关联后还能关联
2015-12-07
	修改字段别名判断出错
	增加测试类TestAll
2015-12-11
	统一函数方法查询语法,增加返回单个字段返回方法GetScalar
2015-12-15
	去掉NOTIN,NOTLIKE扩展方法,扩展方法源类型改为强类型
	优化缓存按主键查询方法,直接用键值查询
2016-01-20
	优化导出的对象文档信息
	增加MODEL类似ViewBag的动态字典
2016-01-22
	主键不再只能为int类型,可自定义为其它类型,Add方法改为void
	QueryItem按主键查询方法,参数类型改为object
2016-01-25
	增加列创建时的重写方法OnColumnCreated
2016-02-26
	优化CRLExpressionVisitor,统一二元运算解析
2016-02-29
	增加Update方法
	Update<TOjbect>(Expression<Func<TModel, bool>> expression, TOjbect updateValue) where TOjbect : class
2016-03-11
	修改对象转换ToType<T,T2>错误判断
2016-03-14
	修改ObjectConvert.ConvertObject方法,Nullable转换错误
	增加QueryItem按排序返回方法
2016-03-19
	优化权限控制标注,不需要再手写判断权限了 MenuAuthorAttribute
	增加缓存查询并行查询开关CacheQueryAsParallel
2016-04-14
	增加权限系统数据库切换
	增加Core.Mvc对查询直接返回分页对象的扩展方法public static PageObj<T> ToPageObj<T>(this CRL.LambdaQuery.LambdaQuery<T> query) 
	使查询方法表达式支持属性访问参数如 b=>b.Name.Like(b.Code)
2016-04-15
	Join查询分支增加Where方法,以累加条件
2016-04-19
	增加关联更新RelationUpdate,解决多表关联更新
2016-04-22
	修改属性表达式解析的一个错误
	BaseController增加缓存管理和对象管理的方法
2016-04-25
	BaseController增加统一错误捕获方法
	修改后台字段检查线程异常问题
2016-04-29
	增加关联删除方法 Delete<TModel, TJoin>(Expression<Func<TModel, TJoin, bool>> expression)
2016-05-06
	修改微信支付接口一些错误
	查询字段作了关键字处理,再也不用提心关键字了,手写的除外
2016-05-30
	增加Exists查询方法
2016-06-12
	修改微信支付通知路径错误
	优化了关联更新和删除,使能用完整的Query表示条件
	增加扩展方法Delete<T>(this LambdaQuery<T> query) Update<T>(this LambdaQuery<T> query, ParameCollection updateValue)
	帐户模块帐号改为int AccountDetail.Account
2016-06-24
	优化了值修改通知Change方法,对象值也会被同步了
2016-07-18
	升级到版本4.0,非关系型数据库MongoDB能被支持了
	优化IgnoreCaseDictionary,Key保持原始值
2016-07-22
	增加字段类型转换支持 => b.Id.ToString() == "123" 能转换成cast语法了
	调整分页参数判断
2016-07-23
	优化了对象映射赋值，使用Tuple委托
2016-08-08
	修改关联删除和更新时,条件没有传入
	修改委托赋值时类型转换错误
2016-08-11
	属性可以自定义对字段名了
	[CRL.Attribute.Field(MappingName = "ProductName1")]
	public string ProductName
2016-08-17
	WinForm下,线程不能自动回收,改为Timer
2016-08-20
	优化了对象映射,名称不匹配时异常
	修改了一些关键字错误
2016-9-10
	增加SettingConfig.AutoTrackingModel 以设置是否自动跟踪对象更改
	增加WithTrackingModel查询设置,联合一起用
	增加IModel.BeginTracking方法,手动跟踪对象更改
2016-9-22
	优化映射,更快了
	自定义字段名查询时没什么BUG了
2016-09-26
	优化常量解析,表检查优化
2016-10-14
	去掉对象赋值索引,用SetIndexData方法代替
	修正缓存不存在时更新空值错误
	版本升级为4.1
2016-10-20
	优化字符串操作
2016-11-01
	修正了bool一元运算解析
	query.Where(b => b.IsTop);解析为IsTop=1
2016-11-09
	修正了表达式创建,变量作用域的BUG
2016-11-18
	支持嵌套查询和返回匿名对象了
2016-11-22
	增加了Union查询
	版本升级到4.2
2016-11-25
	字段筛选也支持函数了,和条件筛选一致
	Select((a, b) => new { a.CategoryName, orderid = b.OrderId.IsNull("22") })
2016-12-08
	字段筛选和方法表达式解析被缓存了
	二元运算和常量参数也缓存了
2016-12-12
	数据访问上下文在同一线程访问下是一个了
2016-12-19
	优化数据库事务调用,只生成一个数据访问上下文PackageTrans2(TransMethod method, out string error)
	增加当前调用数据访问上下文统计Base.GetCallDBContext
2017-01-20
	增加了IMode GetUpdateField,IsModified 用来判断属性是否被修改过
2017-02-10
	修改解析缓存错误,导至变量查询一直一样
2017-02-24
	修改缓存能按库进行划分,不同的库名不同缓存管理
2017-03-07
	修改一个解析缓存错误
	修改语句查询,字段映射顺序问题
	增加解析null判断
2017-03-13
	SqlBulkCopy支持事务了,修改数据库事务PackageTrans2没有正确回滚
	DbTransaction事务可以嵌套调用了
2017-03-20
	增加CRLDbConnectionScope,使多次访问只用打开一次数据连接
	DbTransaction事务修改为基于此控制
	增加PackageMethod方法封装
2017-04-14
	优化表达式序列化,常用方法和转换能支持了
	修改枚举值取值转换时错误
	修改按参数列新时$关键字判断错误
2017-04-25
	CallContext修改逻辑读为正常读,原因是开启线程时,容易造成只有一个实例,TODO,但是会引一个空实例BUG,未发现
2017-05-23
	增加Base.GetSQLRunningtime,打印当前方法范围内所有语句查询
2017-06-08
	升级到4.4,主从读写分离支持了
	更改MongoDB自增主键
2017-07-29
	修改多次Join后多次Select的BUG
2017-08-07
	优化性能监视
2017-08-21
	去掉了解析缓存,并优化拼接内存占用,优化所有列选择,查询内存占用大量减少
	升级到4.5
2017-09-15
	增加扩展方法二元运算支持ss2=(b.Id*b.Number*1).SUM()
	增加Len方法 b.Id.Len()==10
2017-10-18
	增加关联时也能进行Sum
	q2.Select((a, b) => new { ss = a.Id.SUM(), ss2 = a.SUM<Code.ProductData, Code.Member>((a1, b1) => a1.Id * 3*b.Id) });
	或关联条件
    q2.Select((a, b) => new { ss = q2.SUM((a1, b1) => a1.Id * b1.Id) });
2017-10-25
	增加字符串参数排序
	query3.OrderBy("id desc");
2017-11-08
	版本升为4.51
	MySql升级到最新版,所有查询实现,测试通过
	优化分页返回,count为0时不再二次查询
2017-11-14
	增加异步插入方法
	public virtual void Add(TModel p, bool asyn = false)
	为TRUE时,会使用消息队列定时批量插入
2017-11-18
	增加原生SQL查询时,参数化处理,并接的SQL也能提取参数了
	增加生成参数时,按固定参数名处理
2017-12-04
	增加DbSet方式,子集合能更方便查询了
2017-12-26
	增加方法 LambdaQueryJoin<T, TJoin> Where(Expression<Func<T, TJoin, bool>> expression)
	能传入所有关联内型条件
2018-01-23
	增加关联追加条件
	public LambdaQueryJoin<T, TJoin> JoinAfter(Expression<Func<TJoin, bool>> expression)
2018-09-16
	增加联合索引设置，在IModel内，实现BuildIndex
	public override AbsPropertyBuilder BuildIndex()
	{
		var build = new PropertyBuilder<TestModel>();
		build.AsUnionIndex("AsUnionIndex", b => new { b.Name, b.Name2 });
		return build;
	}
2018-12-15
	DBLocation增加ManageName，以灵活判断数据源
	缓存增加dataBase以支持多库相同的对象储存
2019-04-12
	升级到5.0,变更了一些方法,完善了关联查询,语法有些差异